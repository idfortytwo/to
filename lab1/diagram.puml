@startuml

class Decimal
Decimal <-[dashed]- CurrencyCalculator
Decimal <-[dashed]- Currency
Decimal <-u[dashed]- NBPParser
Decimal <-l[dashed]- UserInterface

class xml
xml <-d[dashed]- XMLProvider

class Currency {
    + code: str <<get>>
    + name: str <<get>>
    + avg_exchange_rate: Decimal <<get>>
    + conversion_factor: int <<get>>
}

class Currencies {
    + currencies: [Currency] <<get>>
    + get_currencies_dict(): {str: Currency}}
}
Currencies "1" *-- "n" Currency


class SingletonMetaclass {
    - _instances: {Class: object}
    + __call__(Class, ...): object
}
SingletonMetaclass -d-|> type

class NBPParser {
    - _data_source: Iterable
    + parse(): Generator[Tuple[str, str, Decimal, int]]
}

class XMLProvider {
    + xml: xml.ElementTree <<get>>
    + get_xml_gen(): Generator[ElementTree.Element]
}
XMLProvider -[dashed]-> "<<instantiates>>" SingletonMetaclass
XMLProvider --> NBPParser

class CurrencyCalculator {
    + currencies: [Currency] <<get>>
    + currencies_dict: {str: Currency} <<get>>
    + {static} convert(Currency, Currency, Decimal)
}
CurrencyCalculator "1" --o "1" XMLProvider
CurrencyCalculator "1" --o "1" NBPParser
CurrencyCalculator "1" ---* "1" Currencies
CurrencyCalculator -l-> Currency

class UserInterface {
    - _calculator: CurrencyCalculator
    - _format: str
    - _print_header(): void
    - _print_currency(): void
    - _print_currencies(): void
    - {static} _get_amount_from_input(): Decimal
    - _get_currency_from_input(str): Currency
    - {static} _check_currency_code_format(str): re.Match
    - {static} _ask_exit(): bool
    - _input_loop(): void
    + run(): void
}
UserInterface "1" --o "1" CurrencyCalculator
UserInterface -[dashed]--> Currency

@enduml