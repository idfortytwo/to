@startuml

abstract class FireEngineState {
    + fire_engine: FireEngine
    + {abstract} handle_ready()
    + {abstract} handle_busy()
}
class ReadyState {
    + handle_ready()
    + handle_busy()
}
class BusyState {
    + handle_ready()
    + handle_busy()
}
ReadyState .u-|> FireEngineState
BusyState .u-|> FireEngineState

class FireEngine {
    + {r/o} name
    + {r/o} state
    + set_state(state: FireEngineState)
    + request_ready()
    + request_busy()
}
FireEngine "1" o-r-o "1" FireEngineState

abstract class Iterable {
    + {abstract} __iter__()
}
class FireEngineSquad {
    + {r/o} engines: List[FireEngine]
    - _strategy: ExecutionStrategy
    + send()
    + __iter__(): List[FireEngine]
}
FireEngineSquad "1" --o "n" FireEngine
FireEngineSquad "1" *-d-* "1" ExecutionStrategy


enum EventType {
    + {static} FIRE
    + {static} FIRE_FALSE_ALARM
    + {static} LOCAL_THREAT
    + {static} LOCAL_THREAT_FALSE_ALARM
}
class Event {
    + event_type: EventType
    + coords: Tuple[float, float]
}
Event .d-o EventType

class Department {
    + title: str
    + engines: [FireEngine]
}
abstract class Iterator {
    + {abstract} __iter__()
    + {abstract} __next__()
}
class ClosestEnginesIterator {
    - _departments: List[Department]
    - _department_i: int
    - _engine_i: int
    + __iter__(): ClosestEnginesIterator
    + __next__(): Engine
}
ClosestEnginesIterator .-r|> Iterator
ClosestEnginesIterator -- Event
ClosestEnginesIterator .-> FireEngineState

Department "1" --* "n" FireEngine

abstract class PreparationStrategy {
    - _departments: List[Department]
    - _squad: FireEngineSquad
    + {abstract}  request_squad(Event): FireEngineSquad
    - _request_n_engines(Event, int): List[FireEngine]
}
PreparationStrategy "1" -r-* "1" ClosestEnginesIterator
class FirePreparationStrategy {
    + request_squad(Event): FireEngineSquad
}
class LocalThreatPreparationStrategy {
    + request_squad(Event): FireEngineSquad
}
class FAFirePreparationStrategy {
    + request_squad(Event): FireEngineSquad
}
class FALocalThreatPreparationStrategy {
    + request_squad(Event): FireEngineSquad
}
FirePreparationStrategy .d-|> PreparationStrategy
LocalThreatPreparationStrategy .d-|> PreparationStrategy
FAFirePreparationStrategy .d-|> PreparationStrategy
FALocalThreatPreparationStrategy .d-|> PreparationStrategy

class ExecutionStrategy {
    - _squad: FireEngineSquad
    + {abstract} send()
    - {static} _next_step(delay: float, Callable)
}
class NormalExecutionStrategy {
    + send()
    - _depart()
    - _do_work()
    - _depart_back()
    - _return()
}
class FalseAlarmExecutionStrategy {
    + send()
    - _depart()
    - _depart_back()
    - _return()
}
NormalExecutionStrategy .u-|> ExecutionStrategy
FalseAlarmExecutionStrategy .u-|> ExecutionStrategy


class DepartmentsManager {
    + {r/o} departments: List[Departments]
    - _strategy: PreparationStrategy
    - _sender: FireEngineSender
    + react_to_event(Event)
}
DepartmentsManager "1" -u-* "1" PreparationStrategy
DepartmentsManager -r- Event
DepartmentsManager .l-> EventType
DepartmentsManager "1" --o "n" Department


class FireEngineSender {
    + {r/o} squads: List[FireEngineSquad]
    + add_squad(FireEngineSquad)
    + remove_squad(FireEngineSquad)
    + notify()
}
DepartmentsManager "1" -l-* "1" FireEngineSender
FireEngineSquad .u|> Iterable
FireEngineSender "1" -d-o "n" FireEngineSquad

@enduml